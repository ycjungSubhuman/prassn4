import numpy as np
import random
import util
from sklearn.decomposition import PCA
from sklearn.lda import LDA
from classifier import *

def _read_data():
    all_data = np.loadtxt('data/iris.data', delimiter=',', usecols=(0,1,2,3))
    assert (len(all_data) == 150)
    return [all_data[0:50]/10, all_data[50:100]/10, all_data[100:150]/10]

def _split_train_test(data, iteration, num_chunk):
    chunks = np.split(data, num_chunk)
    train_set = np.array([chunks[i] for i in range(0, num_chunk) if i != iteration])
    return (train_set.reshape((num_chunk - 1)*(len(data)//num_chunk), data.shape[1]), chunks[iteration])

class IrisClassifierTester:
    '''
    Init tester

    Args:
    folds : cross validation folds
    input_mode : input preprocess mode. should be one of ['raw', 'pca', 'lda']
    '''
    def __init__(self, folds=5, input_mode='raw'):
        self.classified_data_list = _read_data();

        if input_mode == 'raw':
            pass
        elif input_mode == 'pca':
            for i, d in enumerate(self.classified_data_list):
                pca = PCA(n_components=2)
                pca.fit(d)
                self.classified_data_list[i] = pca.transform(d)
        elif input_mode == 'lda':
            labels = np.append(1*np.ones(self.classified_data_list[0].shape[0]),
                               2*np.ones(self.classified_data_list[1].shape[0]),
                               3*np.ones(self.classified_data_list[2].shape[0]))
            alldata = np.vstack((self.classified_data_list[0], self.classified_data_list[1], self.classified_data_list[2]))
            lda = LDA(n_components=2)
            lda.fit(alldata, labels)
            for i, d in enumerate(self.classified_data_list):
                self.classified_data_list[i] = lda.transform(d)

        else:
            raise 'invalid input_mode: {}'.format(input_mode)

        self.folds = folds
        self.train_test_pairs = [[] for _ in range(0, folds)]
        self.num_class = len(self.classified_data_list)
        self.confusions = np.zeros((self.num_class, self.num_class))

    def run(self):
        for _ in range(10):
            util.shuffle(self.classified_data_list)
            for i in range(0, self.folds):
                self.train_test_pairs[i] = [_split_train_test(d, i, self.folds) for d in self.classified_data_list]

            for i in range(0, self.folds):
                classifier = self._get_classifier([train_set for (train_set, _) in self.train_test_pairs[i]])
                test_set = [(self.train_test_pairs[i][j][1], j) for j in range(0, self.num_class)]

                for (rows, gt) in test_set:
                    for d in rows:
                        class_of_data = classifier.classify(d)
                        self.confusions[class_of_data][gt] += 1

    def _get_classifier(self, train_set):
        raise 'Not Implemented'

    def get_confusion_matrix(self):
        return self.confusions

    def get_precision(self):
        return np.trace(self.confusions) / np.sum(self.confusions)

class OneVsOneTester(IrisClassifierTester):
    def __init__(self, kernel, folds=5):
        super().__init__(folds)
        self.kernel = kernel

    def _get_classifier(self, train_set):
        return OneVsOneSvmClassifier(train_set, self.kernel)

class OneVsAllTester(IrisClassifierTester):
    def __init__(self, kernel, folds=5):
        super().__init__(folds)
        self.kernel = kernel

    def _get_classifier(self, train_set):
        return OneVsAllSvmClassifier(train_set, self.kernel)

class LibSvmTester(IrisClassifierTester):
    def __init__(self, kernel, folds=5):
        super().__init__(folds)
        self.kernel = kernel

    def _get_classifier(self, train_set):
        return LibSvmClassifier(train_set, self.kernel)

class EnsembleSvmTester(IrisClassifierTester):
    def __init__(self, kernel, svm_constructor, ensemble_size, folds=5):
        super().__init__(folds)
        self.kernel = kernel
        self.svm_constructor = svm_constructor
        self.ensemble_size = ensemble_size

    def _get_classifier(self, train_set):
        return EnsembleSvmClassifier(train_set, self.kernel, self.svm_constructor, self.ensemble_size)

